# This job tests the default GCC compilation.
# It is designed to always pass from a CI perspective, reporting
# success or failure in the Allure report instead.
compile-jureca-ampere80:
  extends: .test_template 
  stage: test
  rules:
    - if: '$RUN_COMPILE_JURECA_AMPERE80 == "true" || $RUN_ALL_TESTS == "true"'
  image: registry.jsc.fz-juelich.de/muralikrishnan1/ippl:latest
  tags:
    - jureca
    - jacamar
    - login
    - shell
  allow_failure: true 
  script: |
    set -e
    echo "Starting jureca GCC compilation test..."
    
    TEST_NAME="Compile GCC - CUDA Release Mode Ampere80"
    RESULTS_SUBDIR="compile-test" 
    
    TEST_RESULTS_DIR="${RESULTS_DIR}/${RESULTS_SUBDIR}/"
    mkdir -p "${TEST_RESULTS_DIR}"
    
    # --- Compilation Step ---
    # The '|| true' ensures the CI script step doesn't fail if 'make' returns an error.
    # The exit code is captured to determine the test status.
    COMPILE_STATUS=0
    {
      module load Stages/2025  GCC
      module load CMake
      module load NCCL
      module load OpenMPI

      mkdir -p build && cd build &&
      cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DKokkos_ARCH_AMPERE80=ON \
        -DCMAKE_CXX_STANDARD=20 \
        -DIPPL_ENABLE_FFT=ON \
        -DIPPL_ENABLE_TESTS=ON \
        -DUSE_ALTERNATIVE_VARIANT=ON \
        -DIPPL_ENABLE_SOLVERS=ON \
        -DIPPL_ENABLE_ALPINE=True \
        -DIPPL_PLATFORMS=cuda &&
      make -j 8
    } > "${TEST_RESULTS_DIR}/stdout.log" 2> "${TEST_RESULTS_DIR}/stderr.log" || COMPILE_STATUS=$?

    cd ..

    STATUS="passed"
    MESSAGE="Compilation with default GCC settings successful."

    if [ "${COMPILE_STATUS}" -ne 0 ]; then
      STATUS="failed"
      # Grab the first few lines of the error log for a quick summary
      MESSAGE=$(head -n 5 "${TEST_RESULTS_DIR}/stderr.log" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
      echo "Compilation failed. See generated report for details."
    else
      echo "Compilation successful."
    fi



    RESULT_FILE="${TEST_RESULTS_DIR}/result.json"
    echo "{" > "${RESULT_FILE}"
    echo "  \"name\": \"${TEST_NAME}\"," >> "${RESULT_FILE}"
    echo "  \"status\": \"${STATUS}\"," >> "${RESULT_FILE}"
    echo "  \"statusDetails\": {" >> "${RESULT_FILE}"
    echo "    \"message\": \"${MESSAGE}\"" >> "${RESULT_FILE}"
    echo "  }," >> "${RESULT_FILE}"
    echo "  \"attachments\": [" >> "${RESULT_FILE}"
    echo "    { \"name\": \"stdout\", \"source\": \"stdout.log\", \"type\": \"text/plain\" }," >> "${RESULT_FILE}"
    echo "    { \"name\": \"stderr\", \"source\": \"stderr.log\", \"type\": \"text/plain\" }" >> "${RESULT_FILE}"
    echo "  ]" >> "${RESULT_FILE}"
    echo "}" >> "${RESULT_FILE}"


    echo "Compilation test results have been saved to ${TEST_RESULTS_DIR}"

